name: Release Service

on:
  release:
    types: [published]

jobs:
  release:
    name: Release Service
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    env:
      VERSION: '' # will be set in the workflow
      UPLOAD_URL: '' # will be set in the workflow
    outputs:
      version: ${{ env.VERSION }}
      UPLOAD_URL: ${{ env.UPLOAD_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Parse version from package.json
        run: |
          echo "VERSION=$(cat ./VERSION_FILE)" >> "$GITHUB_ENV"
      - name: Generate release notes
        run: |
          ./.github/scripts/get_latest_changelog.sh --output-to-file
          cat release_notes.md
      - name: Create release and upload release asset
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `v${process.env.VERSION}`
              });
              core.exportVariable('UPLOAD_URL', release.data.upload_url);
            } catch (error) {
              core.setFailed(`Failed to get release: ${error.message}`);
            }
  remove-old-beta-release:
    name: Remove old beta release
    needs:
      - release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    env:
      VERSION: ${{ needs.release.outputs.version }}
    steps:
      - name: Remove old beta release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            let version ='${{ env.VERSION }}'.trim().split('.').slice(0, 2).join('.');
            let currentVersion = `${version}.${{github.run_id}}-beta`;
            console.log(`Current Version: ${currentVersion}`);
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            for(const idx in releases.data) {
              const release = releases.data[idx];
              if (release.tag_name.includes("-beta") && release.tag_name !== `v${currentVersion}`) {
                for(const assetIdx in release.assets) {
                  const asset = release.assets[assetIdx];
                  console.log(`Deleting asset: ${asset.name}`);
                  await github.rest.repos.deleteReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id
                  });
                }

                console.log(`Deleting release: ${release.tag_name}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });

                console.log(`Deleting tag: tags/${release.tag_name}`);
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
              }
            }
  remove-old-canary-release:
    name: Remove old beta release
    needs:
      - release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    env:
      VERSION: ${{ needs.release.outputs.version }}
    steps:
      - name: Remove old beta release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            let version ='${{ env.VERSION }}'.trim().split('.').slice(0, 2).join('.');
            let currentVersion = `${version}.${{github.run_id}}-beta`;
            console.log(`Current Version: ${currentVersion}`);
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            for(const idx in releases.data) {
              const release = releases.data[idx];
              if (release.tag_name.includes("-canary") && release.tag_name !== `v${currentVersion}`) {
                for(const assetIdx in release.assets) {
                  const asset = release.assets[assetIdx];
                  console.log(`Deleting asset: ${asset.name}`);
                  await github.rest.repos.deleteReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id
                  });
                }

                console.log(`Deleting release: ${release.tag_name}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });

                console.log(`Deleting tag: tags/${release.tag_name}`);
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
              }
            }
  discord-announce:
    needs:
      - release
    name: Announce on Discord
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      VERSION: ''
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: |
          VERSION=$(cat VERSION_FILE)
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"
      - name: Announce on discord
        id: announce_discord
        run: |
          ./.github/scripts/announce_discord.sh --webhook-url $DISCORD_WEBHOOK --version $VERSION
        env:
          SLACK_WEBHOOKS: ${{ env.DISCORD_WEBHOOK }}
